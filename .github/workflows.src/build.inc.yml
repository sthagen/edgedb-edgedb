<% macro workflow_dispatch() %>
  workflow_dispatch:
    inputs:
      gelpkg_ref:
        description: "gel-pkg git ref used to build the packages"
        default: "master"
      metapkg_ref:
        description: "metapkg git ref used to build the packages"
        default: "master"
<%- endmacro %>

<% macro workflow(package, targets, publications, subdist="", publish_all=False) %>
  prep:
    runs-on: ubuntu-latest
<% if subdist == "nightly" %>
    outputs:
<% for tgt in targets.linux + targets.macos %>
      if_<< tgt.name.replace('-', '_') >>: ${{ steps.scm.outputs.if_<< tgt.name.replace('-', '_') >> }}
<% endfor %>
<% endif %>
    steps:
    - uses: actions/checkout@v4

<% if subdist == "nightly" %>
    - name: Determine SCM revision
      id: scm
      shell: bash
      run: |
        rev=$(git rev-parse HEAD)
        jq_filter='.packages[] | select(.basename == "gel-server") | select(.architecture == $ARCH) | .version_details.metadata.scm_revision | . as $rev | select(($rev != null) and ($REV | startswith($rev)))'
<% for tgt in targets.linux + targets.macos %>
        key="<< tgt.name >>"
        val=true

<% if tgt.family == "debian" %>
        idx_file=<< tgt.platform_version >>.nightly.json
        url=https://packages.edgedb.com/apt/.jsonindexes/$idx_file

<% elif tgt.family == "redhat" %>
        idx_file=el<< tgt.platform_version >>.nightly.json
        url=https://packages.edgedb.com/rpm/.jsonindexes/$idx_file

<% elif tgt.family == "generic" %>
        idx_file=<< tgt.platform_version >>-unknown-linux-<< "{}".format(tgt.platform_libc) if tgt.platform_libc else "gnu" >>.nightly.json
        url=https://packages.edgedb.com/archive/.jsonindexes/$idx_file

<% elif tgt.platform == "macos" %>
        idx_file=<< tgt.platform_version >>-apple-darwin.nightly.json
        url=https://packages.edgedb.com/archive/.jsonindexes/$idx_file

<% endif %>
        tmp_file="/tmp/$idx_file"

        if [ ! -e "$tmp_file" ]; then
          curl --fail -o $tmp_file -s $url || true
        fi
        if [ -e "$tmp_file" ]; then
          out=$(< "$tmp_file" jq -r --arg REV "$rev" --arg ARCH "<< tgt.arch >>" "$jq_filter")
          if [ -n "$out" ]; then
            echo "Skip rebuilding existing ${key}"
            val=false
          fi
        fi

        echo if_${key//-/_}="$val" >> $GITHUB_OUTPUT

<% endfor %>
<% endif %>

<%- for tgt in targets.linux %>
<%- set plat_id = tgt.platform + ("{}".format(tgt.platform_libc) if tgt.platform_libc else "") + ("-{}".format(tgt.platform_version) if tgt.platform_version else "") %>

  build-<< tgt.name >>:
    runs-on: << tgt.runs_on if tgt.runs_on else "ubuntu-latest" >>
    needs: prep
<% if subdist == "nightly" %>
    if: needs.prep.outputs.if_<< tgt.name.replace('-', '_') >> == 'true'
<% endif %>

    steps:
    - name: Build
      uses: docker://ghcr.io/geldata/gelpkg-build-<< plat_id >>:latest
      env:
        PACKAGE: "<< package.name >>"
        SRC_REF: "${{ github.sha }}"
        PKG_REVISION: "<current-date>"
        <%- if subdist != "" %>
        PKG_SUBDIST: "<< subdist >>"
        <%- endif %>
        PKG_PLATFORM: "<< tgt.platform >>"
        PKG_PLATFORM_VERSION: "<< tgt.platform_version >>"
        EXTRA_OPTIMIZATIONS: "true"
        <%- if subdist != "nightly" %>
        BUILD_IS_RELEASE: "true"
        <%- endif %>
        <%- if tgt.family == "generic" %>
        BUILD_GENERIC: true
        <%- endif %>
        <%- if tgt.platform_libc %>
        PKG_PLATFORM_LIBC: "<< tgt.platform_libc >>"
        <%- endif %>
        METAPKG_GIT_CACHE: disabled
        GEL_PKG_REF: ${{ inputs.gelpkg_ref }}
        METAPKG_REF: ${{ inputs.metapkg_ref }}

    - uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874  # v4.4.0
      with:
        name: builds-<< tgt.name >>
        path: artifacts/<< plat_id >>
<%- endfor %>

<%- for tgt in targets.macos %>
<%- set plat_id = tgt.platform + ("{}".format(tgt.platform_libc) if tgt.platform_libc else "") + ("-{}".format(tgt.platform_version) if tgt.platform_version else "") %>

  build-<< tgt.name >>:
    runs-on: << tgt.runs_on if tgt.runs_on else "macos-latest" >>
    needs: prep
<% if subdist == "nightly" %>
    if: needs.prep.outputs.if_<< tgt.name.replace('-', '_') >> == 'true'
<% endif %>

    steps:
    - name: Update Homebrew before installing Rust toolchain
      run: |
        # Homebrew renamed `rustup-init` to `rustup`:
        #   https://github.com/Homebrew/homebrew-core/pull/177840
        # But the GitHub Action runner is not updated with this change yet.
        # This caused the later `brew update` in step `Build` to relink Rust
        # toolchain executables, overwriting the custom toolchain installed by
        # `dsherret/rust-toolchain-file`. So let's just run `brew update` early.
        brew update

    - uses: actions/checkout@v4
      if: << 'false' if tgt.runs_on and 'self-hosted' in tgt.runs_on else 'true' >>
      with:
        sparse-checkout: |
          rust-toolchain.toml
        sparse-checkout-cone-mode: false

    - name: Install Rust toolchain
      uses: dsherret/rust-toolchain-file@v1
      if: << 'false' if tgt.runs_on and 'self-hosted' in tgt.runs_on else 'true' >>

    - uses: actions/checkout@v4
      with:
        repository: edgedb/edgedb-pkg
        ref: master
        path: edgedb-pkg

    - name: Set up Python
      uses: actions/setup-python@v5
      if: << 'false' if tgt.runs_on and 'self-hosted' in tgt.runs_on else 'true' >>
      with:
        python-version: "3.12"

    - name: Set up NodeJS
      uses: actions/setup-node@v4
      if: << 'false' if tgt.runs_on and 'self-hosted' in tgt.runs_on else 'true' >>
      with:
        node-version: '20'

    - name: Install dependencies
      if: << 'false' if tgt.runs_on and 'self-hosted' in tgt.runs_on else 'true' >>
      run: |
        env HOMEBREW_NO_AUTO_UPDATE=1 brew install libmagic

    - name: Install an alias
      # This is probably not strictly needed, but sentencepiece build script reports
      # errors without it.
      if: << 'false' if tgt.runs_on and 'self-hosted' in tgt.runs_on else 'true' >>
      run: |
        printf '#!/bin/sh\n\nexec sysctl -n hw.logicalcpu' > /usr/local/bin/nproc
        chmod +x /usr/local/bin/nproc

    - name: Build
      env:
        PACKAGE: "<< package.name >>"
        SRC_REF: "${{ github.sha }}"
        <%- if subdist != "nightly" %>
        BUILD_IS_RELEASE: "true"
        <%- endif %>
        PKG_REVISION: "<current-date>"
        <%- if subdist != "" %>
        PKG_SUBDIST: "<< subdist >>"
        <%- endif %>
        PKG_PLATFORM: "<< tgt.platform >>"
        PKG_PLATFORM_VERSION: "<< tgt.platform_version >>"
        PKG_PLATFORM_ARCH: "<< tgt.arch if tgt.arch else '' >>"
        EXTRA_OPTIMIZATIONS: "true"
        METAPKG_GIT_CACHE: disabled
        <%- if tgt.family == "generic" %>
        BUILD_GENERIC: true
        <%- endif %>
        CMAKE_POLICY_VERSION_MINIMUM: '3.5'
        GEL_PKG_REF: ${{ inputs.gelpkg_ref }}
        METAPKG_REF: ${{ inputs.metapkg_ref }}
      run: |
        edgedb-pkg/integration/macos/build.sh

    - uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874  # v4.4.0
      with:
        name: builds-<< tgt.name >>
        path: artifacts/<< plat_id >>
<%- endfor %>

<%- for tgt in targets.linux %>
<%- set plat_id = tgt.platform + ("{}".format(tgt.platform_libc) if tgt.platform_libc else "") + ("-{}".format(tgt.platform_version) if tgt.platform_version else "") %>

  test-<< tgt.name >>:
    needs: [build-<< tgt.name >>]
    runs-on: << tgt.runs_on if tgt.runs_on else "ubuntu-latest" >>

    steps:
    - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16  # v4.1.8
      with:
        name: builds-<< tgt.name >>
        path: artifacts/<< plat_id >>

    - name: Test
      uses: docker://ghcr.io/geldata/gelpkg-test-<< plat_id >>:latest
      env:
        <%- if subdist != "" %>
        PKG_SUBDIST: "<< subdist >>"
        <%- endif %>
        PKG_PLATFORM: "<< tgt.platform >>"
        PKG_PLATFORM_VERSION: "<< tgt.platform_version >>"
        PKG_PLATFORM_LIBC: "<< tgt.platform_libc >>"
        PKG_TEST_SELECT: "<< package.test.select >>"
        PKG_TEST_EXCLUDE: "<< package.test.exclude >>"
        PKG_TEST_FILES: "<< package.test.files >> << tgt.test.files >>"
        # edb test with -j higher than 1 seems to result in workflow
        # jobs getting killed arbitrarily by Github.
        PKG_TEST_JOBS: << 0 if tgt.runs_on and 'self-hosted' in tgt.runs_on else 1 >>
<%- endfor %>

<%- for tgt in targets.macos %>
<%- set plat_id = tgt.platform + ("{}".format(tgt.platform_libc) if tgt.platform_libc else "") + ("-{}".format(tgt.platform_version) if tgt.platform_version else "") %>

  test-<< tgt.name >>:
    needs: [build-<< tgt.name >>]
    runs-on: << tgt.runs_on if tgt.runs_on else "macos-latest" >>

    steps:
    - uses: actions/checkout@v4
      with:
        repository: edgedb/edgedb-pkg
        ref: master
        path: edgedb-pkg

    - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16  # v4.1.8
      with:
        name: builds-<< tgt.name >>
        path: artifacts/<< plat_id >>

    - name: Test
      env:
        <%- if subdist != "" %>
        PKG_SUBDIST: "<< subdist >>"
        <%- endif %>
        PKG_PLATFORM: "<< tgt.platform >>"
        PKG_PLATFORM_VERSION: "<< tgt.platform_version >>"
        PKG_TEST_SELECT: "<< package.test.select >>"
        PKG_TEST_EXCLUDE: "<< package.test.exclude >>"
        PKG_TEST_FILES: "<< package.test.files >> << tgt.test.files >>"
      run: |
        <%- if tgt.platform_version == "x86_64" %>
        # Bump shmmax and shmall to avoid test failures.
        sudo sysctl -w kern.sysv.shmmax=12582912
        sudo sysctl -w kern.sysv.shmall=12582912
        <%- endif %>
        edgedb-pkg/integration/macos/test.sh
<%- endfor %>

<%- if publish_all %>
  collect:
    needs:
    <%- for tgt in targets.linux + targets.macos %>
    - test-<< tgt.name >>
    <%- endfor %>
    runs-on: ubuntu-latest
    steps:
      - run: echo 'All build+tests passed, ready to publish now!'
<%- endif %>

<%- for tgt in targets.linux %>
<%- set plat_id = tgt.platform + ("{}".format(tgt.platform_libc) if tgt.platform_libc else "") + ("-{}".format(tgt.platform_version) if tgt.platform_version else "") %>
<%- for publish in publications %>

  publish<< publish.suffix>>-<< tgt.name >>:
    needs: [<% if publish_all %>collect<% else %>test-<< tgt.name >><% endif %>]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16  # v4.1.8
      with:
        name: builds-<< tgt.name >>
        path: artifacts/<< plat_id >>

    - name: Publish
      uses: docker://ghcr.io/geldata/gelpkg-upload-linux-x86_64:latest
      env:
        <%- if subdist != "" %>
        PKG_SUBDIST: "<< subdist >>"
        <%- endif %>
        <%- if publish.server != "" %>
        PACKAGE_SERVER: << publish.server >>
        <%- endif %>
        PKG_PLATFORM: "<< tgt.platform >>"
        PKG_PLATFORM_VERSION: "<< tgt.platform_version >>"
        PKG_PLATFORM_LIBC: "<< tgt.platform_libc >>"
        PACKAGE_UPLOAD_SSH_KEY: "${{ secrets.PACKAGE_UPLOAD_SSH_KEY }}"

  check-published<<publish.suffix>>-<< tgt.name >>:
    needs: [publish<< publish.suffix >>-<< tgt.name >>]
    runs-on: << tgt.runs_on if tgt.runs_on else "ubuntu-latest" >>

    steps:
    - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16  # v4.1.8
      with:
        name: builds-<< tgt.name >>
        path: artifacts/<< plat_id >>

    - name: Describe
      id: describe
      uses: edgedb/edgedb-pkg/integration/actions/describe-artifact@master
      with:
        target: << plat_id >>

    - name: Test Published
      uses: docker://ghcr.io/geldata/gelpkg-testpublished-<< plat_id >>:latest
      env:
        PKG_NAME: "${{ steps.describe.outputs.name }}"
        <%- if subdist != "" %>
        PKG_SUBDIST: "<< subdist >>"
        <%- endif %>
        <%- if publish.server != "" %>
        PACKAGE_SERVER: << publish.server >>
        <%- endif %>
        PKG_PLATFORM: "<< tgt.platform >>"
        PKG_PLATFORM_VERSION: "<< tgt.platform_version >>"
        PKG_INSTALL_REF: "${{ steps.describe.outputs.install-ref }}"
        PKG_VERSION_SLOT: "${{ steps.describe.outputs.version-slot }}"

    outputs:
      version-slot: ${{ steps.describe.outputs.version-slot }}
      version-core: ${{ steps.describe.outputs.version-core }}
      catalog-version: ${{ steps.describe.outputs.catalog-version }}
<%- endfor %>
<%- endfor %>

<%- if publications %>
<%- for tgt in targets.macos %>
<%- set plat_id = tgt.platform + ("{}".format(tgt.platform_libc) if tgt.platform_libc else "") + ("-{}".format(tgt.platform_version) if tgt.platform_version else "") %>

  publish-<< tgt.name >>:
    needs: [<% if publish_all %>collect<% else %>test-<< tgt.name >><% endif %>]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16  # v4.1.8
      with:
        name: builds-<< tgt.name >>
        path: artifacts/<< plat_id >>

    - uses: actions/checkout@v4
      with:
        repository: edgedb/edgedb-pkg
        ref: master
        path: edgedb-pkg

    - name: Describe
      id: describe
      uses: edgedb/edgedb-pkg/integration/actions/describe-artifact@master
      with:
        target: << plat_id >>

    - name: Publish
      uses: docker://ghcr.io/geldata/gelpkg-upload-linux-x86_64:latest
      env:
        <%- if subdist != "" %>
        PKG_SUBDIST: "<< subdist >>"
        <%- endif %>
        PKG_PLATFORM: "<< tgt.platform >>"
        PKG_PLATFORM_VERSION: "<< tgt.platform_version >>"
        PACKAGE_UPLOAD_SSH_KEY: "${{ secrets.PACKAGE_UPLOAD_SSH_KEY }}"
<%- endfor %>
<%- endif %>

<%- set docker_tgts = targets.linux | selectattr("docker_arch") | list %>
<%- if docker_tgts and publications %>
<%- set pub_outputs = "needs.check-published-" + (docker_tgts|first)["name"] + ".outputs" %>

  publish-docker:
    needs:
      <%- for tgt in docker_tgts %>
      - check-published-<< tgt.name >>
      <%- endfor %>
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        repository: geldata/gel-docker
        ref: master
        path: dockerfile

    - name: Login to Docker Hub
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
      with:
        registry: ghcr.io
        username: "edgedb-ci"
        password: ${{ secrets.GITHUB_CI_BOT_TOKEN }}

    - env:
        VERSION_SLOT: "${{ << pub_outputs >>.version-slot }}"
        VERSION_CORE: "${{ << pub_outputs >>.version-core }}"
        CATALOG_VERSION: "${{ << pub_outputs >>.catalog-version }}"
        PKG_SUBDIST: "<< subdist >>"
      id: tags
      run: |
        set -e

        url='https://registry.hub.docker.com/v2/repositories/geldata/gel/tags?page_size=100'
        repo_tags=$(
          while [ -n "$url" ]; do
            resp=$(curl -L -s "$url")
            url=$(echo "$resp" | jq -r ".next")
            if [ "$url" = "null" ] || [ -z "$url" ]; then
              break
            fi
            echo "$resp" | jq -r '."results"[]["name"]'
          done | grep "^[[:digit:]]\+.*" | grep -v "alpha\|beta\|rc" || :
        )

        tags=()

        if [ "$PKG_SUBDIST" = "nightly" ]; then
          tags+=(
            "nightly"
            "nightly_${VERSION_SLOT}_cv${CATALOG_VERSION}"
          )
        else
          tags+=( "$VERSION_CORE" )

          top=$(printf "%s\n%s\n" "$VERSION_CORE" "$repo_tags" \
                | grep "^${VERSION_SLOT}[\.-]" \
                | sort --version-sort --reverse | head -n 1)
          if [ "$top" == "$VERSION_CORE" ]; then
            tags+=( "$VERSION_SLOT" )
          fi

          if [ -z "$PKG_SUBDIST" ]; then
            top=$(printf "%s\n%s\n" "$VERSION_CORE" "$repo_tags" \
                  | sort --version-sort --reverse | head -n 1)
            if [ "$top" == "$VERSION_CORE" ]; then
              tags+=( "latest" )
            fi
          fi
        fi

        fq_tags=()
        images=("geldata/gel" "ghcr.io/geldata/gel")

        for image in "${images[@]}"; do
          fq_tags+=("${tags[@]/#/${image}:}")
        done

        IFS=,
        echo "tags=${fq_tags[*]}" >> $GITHUB_OUTPUT

    - name: Set up QEMU
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

    - name: Build and Publish Docker Image
      uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.10.0
      with:
        push: true
        provenance: mode=max
        tags: "${{ steps.tags.outputs.tags }}"
        context: dockerfile
        build-args: |
          version=${{ << pub_outputs >>.version-slot }}
          exact_version=${{ << pub_outputs >>.version-core }}
          <%- if subdist != "" %>
          subdist=<< subdist >>
          <%- endif %>
        platforms: << docker_tgts|map(attribute="docker_arch")|join(",") >>
<%- endif %>

  workflow-notifications:
    if: failure() && github.event_name != 'pull_request'
    name: Notify in Slack on failures

    needs:
      - prep
    <%- if publish_all %>
      - collect
    <%- else %>
    <%- endif %>
    <%- for tgt in targets.linux %>
      - build-<< tgt.name >>
      - test-<< tgt.name >>
    <%- for publish in publications %>
      - publish<< publish.suffix>>-<< tgt.name >>
      - check-published<< publish.suffix>>-<< tgt.name >>
    <%- endfor %>
    <%- endfor %>
    <%- for tgt in targets.macos %>
      - build-<< tgt.name >>
      - test-<< tgt.name >>
    <%- for publish in publications %>
      - publish<< publish.suffix>>-<< tgt.name >>
    <%- endfor %>
    <%- endfor %>
    <%- if docker_tgts and publications %>
      - publish-docker
    <%- endif %>
    runs-on: ubuntu-latest
    permissions:
      actions: 'read'
    steps:
      - name: Slack Workflow Notification
        uses: Gamesight/slack-workflow-status@26a36836c887f260477432e4314ec3490a84f309
        with:
          repo_token: ${{secrets.GITHUB_TOKEN}}
          slack_webhook_url: ${{secrets.ACTIONS_SLACK_WEBHOOK_URL}}
          name: 'Workflow notifications'
          icon_emoji: ':hammer:'
          include_jobs: 'on-failure'

<%- endmacro %>
